// What does @mixins do? It avoids media query over and over again.
/*
    Provides a semantic media query  from the following:
    Respond above xx(screen sizes)
    Respond below XX
    Respond between XX and XX

    Whereas:
    XX is the two letter bootstrap breakpoints (i.e sm, md)

    SYNTAX for media query
    @media (min-width:768px) and (max-width:991px)
    {
        target devices between 768px and 992px
    }

    Its best practice to use Bootstrap breakpoints in your own code but its painful to write them all the time
*/

// Step 1: Identify the breakpoints
// Legend: Create a Sass variable to enumerate breakpoints
//Note: This breakpoints are costomizable via SaSS
$breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
);

//Step 2: Create the map values
//This means that breakpoint values are only written once. Map values like these can be accessed using SaSS map-get function

$breakpoint: map-get($breakpoints, sm ); //Get the small breakpoints
$breakpoint: map-get($breakpoints, md ); //Get the medium breakpoints
$breakpoint: map-get($breakpoints, lg ); //Get the large breakpoints
$breakpoint: map-get($breakpoints, xl ); //Get the extra large breakpoints
$breakpoint: map-get($breakpoints, xxl ); //Get the extra extra large breakpoints

//Step 3: Create map-has-key function - it ensures that key exists within the breakpoints map
@mixin respond-above ($breakpoint) {

    //If the breakpoint exist in the map
    @if map-has-key($breakpoints, $breakpoint )
    {
        //Declare a variable to get the breakpoint value
        $breakpoint-value:map-get($breakpoints , $breakpoint );

        //Write the media query
        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        //Log a warning
        @warn 'Invalid breakpoint: #{breakpoint}.';
        //it displays a warning that a breakpoint doesnt exist in the map
    }
}

//To pass a value to the respond above mixin in the form of bootstrap breakpoint

@include respond-above(sm) {
    .card {
        display: block;
    }
}

//without this (@warn), the media query wont show up in your compiled CSS and you'll have no idea

@mixin respond-below ($breakpoint) {
    //if a breakpoint exist in the map
    @if map-has-key($breakpoints , $breakpoint ) {
        //Get the breakpoint value
        $breakpoint-value: map-get($breakpoints , $breakpoint );

        //write the media query
        @media (max-width: ($breakpoint-value - 1))
        {
            @content; 
        }
    }@else
        {
            @warn 'Invalid breakpoint: #{breakpoint}.';
        }
    }


@include respond-below(lg)
{
    .card {
        display: block;
    }

    img {
        width:100%;
        height: auto
    }
}


/*
    Responnd between
    -it checks both lower and upper keys exists in the breakpoinnts beforewrting this in the media query
    -we will check that both $lower and $upper keys exist int the $breakpoints map before writing it in the media query
*/

@mixin respond-between ($lower, $upper) {
    //Whereas: the variables above indicates that these are lower and upper breakpoints that are existing in the map

    //Create a conditional statement where we will define that the lower and upper breakpoint in the map
    @if map-has-key($breakpoints , $lower ) and map-has-key($breakpoints , $upper )
    {
        // Get the lower and upper breakpoints

        $lower-breakpoint:map-get($breakpoints, $lower );
        $upper-breakpoint:map-get($breakpoints, $upper );

        //Write the media query
        @media (min-width:$lower-breakpoint) and (max-width:($upper-breakpoint -1))
        {
            @content;
        
        }
        //If one or both of the breakpoints don't exist
    
    } @else {

        //If lower breakpoint is invalid
        @if (map-has-key($breakpoints, $lower ) == false) 
        {
            //log warning
            @warn 'Invalid lower breakpoint: #{$lower}.';
        }

        @if (map-has-key($breakpoints, $upper ) == false) 
        {
            //log warning
            @warn 'Invalid lower breakpoint: #{$upper}.';
        }

        
    }
}

@include respond-between(sm, xxl) {
    .card img {
        display: block;
        height: 100%;
    }
}